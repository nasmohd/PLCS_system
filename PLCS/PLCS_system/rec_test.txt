import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

from django.shortcuts import render
from .models import User, Project

def recommend_projects(request, user_id):
    # Step 1: Load data from the database

    # Load user data
    user = User.objects.get(id=user_id)
    users = [(user.email, user.skills)]

    # Load project data
    projects = [(project.project_id, project.skills) for project in Project.objects.all()]

    # Step 2: Preprocess data and compute cosine similarity matrix

    # Preprocess skills for CountVectorizer
    all_skills = [user[1] for user in users] + [project[1] for project in projects]

    # Create CountVectorizer and fit-transform the skills
    vectorizer = CountVectorizer()
    skills_matrix = vectorizer.fit_transform(all_skills)

    # Compute cosine similarity matrix
    user_skills = skills_matrix[:len(users)]
    project_skills = skills_matrix[len(users):]
    cosine_sim_matrix = cosine_similarity(user_skills, project_skills)

    # Step 3: Generate recommendations

    recommendations = []

    for user_index, user in enumerate(users):
        email = user[0]

        # Get cosine similarity scores for the user
        user_sim_scores = cosine_sim_matrix[user_index]

        # Sort projects based on similarity scores
        sorted_indices = user_sim_scores.argsort()[::-1]

        # Get top 15 recommended projects
        num_projects = min(15, len(projects))
        recommended_projects = [projects[i][0] for i in sorted_indices[:num_projects]]

        recommendations.append((email, recommended_projects))

    # Render the recommendations in a template
    return render(request, 'recommendations.html', {'recommendations': recommendations})
